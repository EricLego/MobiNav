// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: cqPqdm5dVjtUHr8PKgNf76
// Component: FvU-3972RyV7
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { Iframe } from "@plasmicpkgs/plasmic-basic-components";
import { useScreenVariants as useScreenVariantszuTkMnQwKg75 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: zuTKMnQwKg75/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: cqPqdm5dVjtUHr8PKgNf76/projectcss
import sty from "./PlasmicMobiNavMap.module.css"; // plasmic-import: FvU-3972RyV7/css
import imageG9LHaxPaYvOk from "./images/image.png"; // plasmic-import: G9LHaxPAYvOK/picture

createPlasmicElementProxy;

export const PlasmicMobiNavMap__VariantProps = new Array();

export const PlasmicMobiNavMap__ArgProps = new Array();

const $$ = {};

function PlasmicMobiNavMap__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantszuTkMnQwKg75()
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"mobiNavMap"}
          data-plasmic-override={overrides.mobiNavMap}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.mobiNavMap
          )}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__noVpm)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__b7HVv)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___9027Z)}
              >
                <PlasmicImg__
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(sty.img)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100px"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: imageG9LHaxPaYvOk,
                    fullWidth: 1200,
                    fullHeight: 1131,
                    aspectRatio: undefined
                  }}
                />

                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text
                  )}
                >
                  {"MobiNav - Campus Navigation"}
                </div>
              </Stack__>
              <PlasmicLink__
                data-plasmic-name={"link"}
                data-plasmic-override={overrides.link}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link
                )}
                href={"https://www.plasmic.app/"}
                platform={"react"}
              >
                {"KSU Home Page"}
              </PlasmicLink__>
            </Stack__>
          </Stack__>
          <Iframe
            data-plasmic-name={"iframe"}
            data-plasmic-override={overrides.iframe}
            className={classNames("__wab_instance", sty.iframe)}
            src={"https://www.example.com"}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  mobiNavMap: ["mobiNavMap", "img", "text", "link", "iframe"],
  img: ["img"],
  text: ["text"],
  link: ["link"],
  iframe: ["iframe"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMobiNavMap__ArgProps,
          internalVariantPropNames: PlasmicMobiNavMap__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMobiNavMap__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "mobiNavMap") {
    func.displayName = "PlasmicMobiNavMap";
  } else {
    func.displayName = `PlasmicMobiNavMap.${nodeName}`;
  }
  return func;
}

export const PlasmicMobiNavMap = Object.assign(
  // Top-level PlasmicMobiNavMap renders the root element
  makeNodeComponent("mobiNavMap"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    text: makeNodeComponent("text"),
    link: makeNodeComponent("link"),
    iframe: makeNodeComponent("iframe"),
    // Metadata about props expected for PlasmicMobiNavMap
    internalVariantProps: PlasmicMobiNavMap__VariantProps,
    internalArgProps: PlasmicMobiNavMap__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicMobiNavMap;
/* prettier-ignore-end */
